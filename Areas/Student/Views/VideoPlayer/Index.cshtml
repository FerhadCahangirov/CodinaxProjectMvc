@using CodinaxProjectMvc.ViewModel.PlayerVm;
@model PlayerSingleVm

@{
    Layout = "_PlayerLayout";
    var source = $"{Model.BaseUrl}/{Model.CurrentVideo.PathOrContainer}/{Model.CurrentVideo.FileName}";
}

<div class="container theo-player-container">
    <video id="videoPlayer"
           class="theoplayer-container video-js theoplayer-skin theo-chromecast-unavailable theo-airplay-unavailable vjs-controls-enabled vjs-workinghover vjs-v5 vjs_video_3-dimensions vjs-has-started theo-hd vjs-paused vjs-user-inactive"
           width="640"
           height="264"
           data-setup={}
           style="display: block; width: 100%; height: 100%;">
        <source src="@Model.BaseUrl/@Model.CurrentVideo.PathOrContainer/@Model.CurrentVideo.FileName" type="video/mp4" />
        <p class="vjs-no-js">
            To view this video please enable JavaScript, and consider upgrading to a
            web browser that
            <a href="https://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a>
        </p>
    </video>
</div>

@section Scripts{
    <script>
        const player = videojs('videoPlayer', {
            controls: true,
            controlBar: {
                children: [
                    'playToggle',
                    'progressControl',
                    'volumePanel',
                    'qualitySelector',
                    'playbackRateMenuButton',
                    'fullscreenToggle',
                ],
            },
            loop: true,
            fluid: false,
            playbackRates: [0.25, 0.5, 1, 1.5, 2],
            plugins: {
                hotkeys: {
                    enableModifiersForNumber: false,
                    seekStep: 30,
                },
            }
        });

        const sources = [
            { format: 'hd1080', src: '@source', type: 'video/mp4' },
            { format: 'hd720', src: '@source', type: 'video/mp4' },
            { format: 'large', src: '@source', type: 'video/mp4' },
            { format: 'medium', src: '@source', type: 'video/mp4' },
            { format: 'small', src: '@source', type: 'video/mp4' },
            { format: 'auto', src: '@source', type: 'video/mp4' }
        ];

        player.qualityselector({
            sources: sources,
            formats: [
                { code: 'hd1080', name: '1080p' },
                { code: 'hd720', name: '720p' },
                { code: 'large', name: '480p' },
                { code: 'medium', name: '360p' },
                { code: 'small', name: '240p' },
                { code: 'auto', name: 'Auto' }
            ],
            onFormatSelected: function (format) {
                console.log("Selected format:", format);

                const currentTime = player.currentTime();
                player.pause();

                const selectedSource = sources.find(source => source.format === format.code);

                console.log('format: ', format, 'selected: ', selectedSource);

                if (selectedSource) {
                    player.one('loadedmetadata', function () {
                        if (isFinite(currentTime)) {
                            player.currentTime(currentTime);
                        }
                        player.play();
                    });

                    player.src(selectedSource.src);
                    player.load();
                } else {
                    console.error('Selected format source not found.');
                }
            }

        });

        let timeoutId;
        const delay = 10000;

        function logWatchedPercentage() {
            const currentTime = player.currentTime();
            const duration = player.duration();
            const watchedPercentage = (currentTime / duration) * 100;

            $.ajax({
                type: 'POST',
                url: '/student/progress/index',
                data: {
                    videoId: '@Model.CurrentVideo.Id',
                    percentage: watchedPercentage.toFixed(2)
                },
                success: (response) => {
                    if(response.success){
                        console.log(`Percentage of video watched: ${watchedPercentage.toFixed(2)}%`);
                    }
                },
                error: (error) => {
                    console.error(error)
                }
            });

            timeoutId = setTimeout(logWatchedPercentage, delay);
        }

        player.on('play', function () {
            if (!timeoutId) {
                timeoutId = setTimeout(logWatchedPercentage, delay);
            }
        });

        player.on('pause', function () {
            if (!timeoutId) {
                timeoutId = setTimeout(logWatchedPercentage, delay);
            }
        });

        player.ended(function () {
            console.log('video has been ended')
        });
        
        let lastCurrentTime = player.currentTime();

        player.on('timeupdate', function () {
            if (!timeoutId) {
                timeoutId = setTimeout(logWatchedPercentage, delay);
            }

            const currentTime = player.currentTime();
            if (Math.abs(currentTime - lastCurrentTime) > 1) {
                console.log(`Video current time changed to: ${currentTime}`);
                lastCurrentTime = currentTime;
            }
            lastCurrentTime = currentTime;
        });

    </script>
}