@using CodinaxProjectMvc.ViewModel.PlayerVm;
@model PlayerSingleVm

@{
    Layout = "_PlayerLayout";
    var source = $"{Model.BaseUrl}/{Model.CurrentVideo.PathOrContainer}/{Model.CurrentVideo.FileName}";
}

<div class="container theo-player-container">
    <video id="videoPlayer"
           class="theoplayer-container video-js theoplayer-skin theo-chromecast-unavailable theo-airplay-unavailable vjs-controls-enabled vjs-workinghover vjs-v5 vjs_video_3-dimensions vjs-has-started theo-hd vjs-paused vjs-user-inactive"
           width="640"
           height="264"
           data-setup={}
           style="display: block; width: 100%; height: 100%;">
        <source src="@Model.BaseUrl/@Model.CurrentVideo.PathOrContainer/@Model.CurrentVideo.FileName" type="video/mp4" />
        <p class="vjs-no-js">
            To view this video please enable JavaScript, and consider upgrading to a
            web browser that
            <a href="https://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a>
        </p>
    </video>
</div>

@section Scripts{

    @if (Model.CurrentVideo != null)
    {
        <script>
            document.addEventListener("DOMContentLoaded", () => {
                if (localStorage.getItem("currentTime"))
                {
                    localStorage.removeItem("currentTime")
                }


                var timeSpan = "@Model.CurrentTime";
                console.log(`********* TimeSpan : ${timeSpan} *********`);

                const timeParts = timeSpan.split(':');
                const hours = parseInt(timeParts[0], 10);
                const minutes = parseInt(timeParts[1], 10);

                let seconds = 0;

                if (timeParts[2].includes('.')) {
                    const secondsParts = timeParts[2].split('.');
                    seconds = parseInt(secondsParts[0], 10);
                } else {
                    seconds = parseInt(timeParts[2], 10);
                }

                const totalSeconds = (hours * 3600) + (minutes * 60) + seconds;

                localStorage.setItem("currentTime", totalSeconds);
            })
        </script>
    }

    <script>
        var source = '@source';

        const player = videojs('videoPlayer', {
            controls: true,
            controlBar: {
                children: [
                    'playToggle',
                    'progressControl',
                    'volumePanel',
                    'qualitySelector',
                    'playbackRateMenuButton',
                    'fullscreenToggle',
                ],
            },
            enableSmoothSeeking: true,
            loop: false,
            playsinline: true,
            playbackRates: [0.25, 0.5, 1, 1.5, 2],
            userActions: {
                click: true
            },
            plugins: {
                hotkeys: {
                    volumeStep: 0.1,
                    seekStep: 5,
                    enableModifiersForNumbers: false
                },
            }
        });

        player.on('loadedmetadata', function (msg) {
            var current_time = localStorage.getItem("currentTime");
            console.log("CurrenTime : ", current_time);
            if (current_time){
                player.play();  
                player.currentTime(current_time);
                localStorage.removeItem("currentTime");
            }
        });

        let lastUpdatedTime = 0;

        const sources = [
            { format: 'hd1080', src: source.replace(".mp4", "") + "_Hd1080" + ".mp4", type: 'video/mp4' },
            { format: 'hd720', src: source.replace(".mp4", "") + "_Hd720" + ".mp4", type: 'video/mp4' },
            { format: 'medium', src: source.replace(".mp4", "") + "_Nhd" + ".mp4", type: 'video/mp4' },
            { format: 'small', src: source.replace(".mp4", "") + "_Qcif" + ".mp4", type: 'video/mp4' },
            { format: 'auto', src: source, type: 'video/mp4' }
        ];

        player.qualityselector({
            formats: [
                { code: 'hd1080', name: '1080p' },
                { code: 'hd720', name: '720p' },
                { code: 'medium', name: '360p' },
                { code: 'small', name: '144p' },
                { code: 'auto', name: 'Auto' }
            ],
            onFormatSelected: function (format) {
                console.log("Selected format:", format);

                const currentTime = player.currentTime();
                player.pause();

                const selectedSource = sources.find(source => source.format === format.code);

                console.log('format: ', format, 'selected: ', selectedSource);

                if (selectedSource) {
                    player.one('loadedmetadata', function () {
                        if (isFinite(currentTime)) {
                            player.currentTime(currentTime);
                        }
                        player.play();
                    });

                    player.src(selectedSource.src);
                    player.load();
                } else {
                    console.error('Selected format source not found.');
                }
            }
        });

        let timeoutId;
        const delay = 10000;

        function logWatchedPercentage() {
            const currentTime = player.currentTime();
            const duration = player.duration();
            const watchedPercentage = (currentTime / duration) * 100;

            $.ajax({
                type: 'POST',
                url: '/student/progress/index',
                data: {
                    videoId: '@Model.CurrentVideo.Id',
                    percentage: watchedPercentage.toFixed(2)
                },
                success: (response) => {
                    if (response.success) {
                        console.log(`Percentage of video watched: ${watchedPercentage.toFixed(2)}%`);
                    }
                },
                error: (error) => {
                    console.error(error)
                }
            });

            timeoutId = setTimeout(logWatchedPercentage, delay);
        }

        player.on('play', function () {
            if (!timeoutId) {
                timeoutId = setTimeout(logWatchedPercentage, delay);
            }
        });

        player.on('pause', function () {
            if (!timeoutId) {
                timeoutId = setTimeout(logWatchedPercentage, delay);
            }
        });

        player.on('timeupdate', function () {
            lastUpdatedTime = player.currentTime();
            console.log(lastUpdatedTime)
        });

        var progressControl = player.controlBar.progressControl;

        progressControl.on('click', function (event) {
            var duration = player.duration();
            var progressControlRect = progressControl.el().getBoundingClientRect();
            var offsetX = event.clientX - progressControlRect.left;
            var width = progressControlRect.width;
            var newTime = (offsetX / width) * duration;

            player.currentTime(newTime);
            console.log('Set new time to:', newTime);
        });
    </script>

}