@model Module

@section Scripts{
    @if (TempData["LectureCreatedSuccess"] != null && (bool)TempData["LectureCreatedSuccess"] == true)
    {
        <script>
            Command: toastr["success"]("Lecture has been created.");
            toastr.options = {
                "closeButton": false,
                "debug": false,
                "newestOnTop": false,
                "progressBar": false,
                "positionClass": "toast-bottom-right",
                "preventDuplicates": false,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "500",
                "timeOut": "1000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            };
        </script>
    }

    @if (TempData["LectureFileCreatedSuccess"] != null && (bool)TempData["LectureFileCreatedSuccess"] == true)
    {
        <script>
            Command: toastr["success"]("Lecture file has been added.");
            toastr.options = {
                "closeButton": false,
                "debug": false,
                "newestOnTop": false,
                "progressBar": false,
                "positionClass": "toast-bottom-right",
                "preventDuplicates": false,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "500",
                "timeOut": "1000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            };
        </script>
    }
}

<nav>
    <ol class="breadcrumb p-0 my-1 mb-3">
        <li class="breadcrumb_item">
            <div class="link_breadcrumb">
                <a>Student</a>
                <div class="slash">/</div>
            </div>
        </li>
        <li class="breadcrumb_item">
            <div class="link_breadcrumb">
                <a href="/student/courses">Courses</a>
                <div class="slash">/</div>
            </div>
        </li>
        <li class="breadcrumb_item active">
            @Model.Course.Title
        </li>
    </ol>
</nav>

<div class="program_container">
    <div class="program_container_section">
        <div class="line"></div>

        <div class="program_container_flex">
            <div style="flex: none;">
            </div>

            <div class="program_info_container" id="courseSingleNoVideo">
                <div class="program_info">
                    <h1 class="title_info"> @Model.Title </h1>

                </div>
                <div class="program_meta_info">
                    <div class="meta_info">
                        <div class="meta_info_icon">
                            <i class="fa-regular fa-file align-middle"></i>
                        </div>
                        <div class="meta_info_text">
                            <p class="meta_title">@Model.Lectures.Where(x => !x.IsDeleted).Count() Lectures</p>
                        </div>
                    </div>
                </div>
            </div>



        </div>

        <div class="line"></div>
    </div>
</div>

<div class="tabs--wrapper display-flex align-items-center justify-space-between">
    <ul class="tabs--container">
        <li class="tabs--tab">
            <a class="tab--item tab--item-active"> Modules </a>
        </li>
        <!---->
        <!---->
    </ul>

    <div class="display-flex">



        <div class="button-set text-right">
            <button class="toggle-module-button" onclick="expandAll(event)"> Expand All </button>
        </div>


    </div>

    <!---->
</div>

<div class="items_list">


    @foreach (Lecture lecture in Model.Lectures.Where(x => !x.IsDeleted).OrderBy(x => x.CreatedDate))
    {
        <div class="item_container">
            <div class="item_card_wrapper" id="item_card_wrapper_@lecture.Id">
                <div class="item_card_header" id="item_card_header_@lecture.Id">
                    <div class="card_header_left" onclick="handleItemExpand('@lecture.Id')">
                        @lecture.Title
                    </div>
                    <div class="card_header_right">

                        @* <Header Bookmark Icon> *@

                        @if (lecture.Bookmarks.Any(x => x.Student.Email == User.Identity.Name))
                        {
                            <button class="card_header_button button_bookmark bookmark_outline bookmark_content_reverse" id="bookmark_button_@lecture.Id" onclick="removeLectureBookmark('@lecture.Id')">
                                <i class="fa-solid fa-bookmark"></i>
                            </button>
                        }
                        else
                        {
                            <button class="card_header_button button_bookmark bookmark_outline bookmark_content" id="bookmark_button_@lecture.Id" onclick="addLectureBookmark('@lecture.Id')">
                                <i class="fa-regular fa-bookmark"></i>
                            </button>
                        }

                        @*! </Header Icon> *@

                        <button class="card_header_button expand_button" onclick="handleItemExpand('@lecture.Id')" id="expand_button_@lecture.Id">
                            <i class="fa-solid fa-arrow-down"></i>
                        </button>
                    </div>
                </div>

                @if (lecture.LectureFiles.Where(x => !x.IsDeleted) != null && lecture.LectureFiles.Where(x => !x.IsDeleted).Count() > 0)
                {
                    <div class="cards_content_wrapper ">
                        <div class="items_cards_container">

                            @foreach (LectureFile lectureFile in lecture.LectureFiles.Where(x => !x.IsDeleted).OrderBy(x => x.CreatedDate))
                            {
                                if (lectureFile.FileType == FileType.MP4)
                                {
                                    <div class="item_card_content">
                                        <div class="card_wrapper_content">
                                            <div class="item_content_container item_indent_0">
                                                <div class="content_left_container">
                                                    <div class="icon_content_item">
                                                        <i class="fa-solid fa-video"></i>
                                                    </div>
                                                    <div class="text_card_info_content">
                                                        <a class="text_card_info_title" href="/student/video-player/@lectureFile.Id"> @lectureFile.Title </a>
                                                        <span class="text_card_info_small"> Video ● @lectureFile.Duration </span>
                                                    </div>
                                                </div>
                                                <div class="content_right_container">
                                                    @* <VideoStatus Progress> *@

                                                    <div class="video-status">
                                                        <div class="progress-wrapper progress-auto">
                                                            <div data-height="12px" class="progress-container">
                                                                <div role="progressbar" class="progress-bar" style="width: @(lectureFile.Progresses.Any(x => x.Student.Email == User.Identity.Name) ? lectureFile.Progresses.First(x => x.Student.Email == User.Identity.Name).Percentage : 0)%;"></div>
                                                            </div>
                                                            <span class="progress-info">@(lectureFile.Progresses.Any(x => x.Student.Email == User.Identity.Name) ? lectureFile.Progresses.First(x => x.Student.Email == User.Identity.Name).Percentage : 0)%</span>
                                                        </div>
                                                    </div>

                                                    @*! </VideoStatus Progress> *@


                                                    @* <ViewLater Icon> *@

                                                    @if (lectureFile.Bookmarks.Any(x => x.Student.Email == User.Identity.Name))
                                                    {
                                                        <button class="card_header_button button_bookmark bookmark_outline whatch_later_remove" id="bookmark_video_button_@lectureFile.Id" onclick="removeVideoBookmark('@lectureFile.Id')">
                                                            <i class="fa-solid fa-circle-check"></i>
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <button class="card_header_button button_bookmark bookmark_outline whatch_later" id="bookmark_video_button_@lectureFile.Id" onclick="addVideoBookmark('@lectureFile.Id')">
                                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" focusable="false" style="pointer-events: none; display: inherit; width: 24px; height: 24px;"><path d="M22 13h-4v4h-2v-4h-4v-2h4V7h2v4h4v2zm-8-6H2v1h12V7zM2 12h8v-1H2v1zm0 4h8v-1H2v1z"></path></svg>
                                                        </button>
                                                    }


                                                    @*! </ViewLater Icon> *@
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                                else if (lectureFile.FileType == FileType.URL)
                                {
                                    <div class="item_card_content">
                                        <div class="card_wrapper_content">
                                            <div class="item_content_container item_indent_0">
                                                <div class="content_left_container">
                                                    <div class="icon_content_item">
                                                        <i class="fa-solid fa-link"></i>
                                                    </div>
                                                    <div class="text_card_info_content">
                                                        <a class="text_card_info_title" href="@lectureFile.Url"> @lectureFile.Title </a>
                                                        <span class="text_card_info_small">Url</span>
                                                    </div>
                                                </div>
                                                <div class="content_right_container">
                                                    @if (lectureFile.Bookmarks.Any(x => x.Student.Email == User.Identity.Name))
                                                    {
                                                        <button class="card_header_button button_bookmark bookmark_outline bookmark_content_reverse" id="bookmark_content_@lectureFile.Id" onclick="removeContentBookmark('@lectureFile.Id')">
                                                            <i class="fa-solid fa-bookmark"></i>
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <button class="card_header_button button_bookmark bookmark_outline bookmark_content" id="bookmark_content_@lectureFile.Id" onclick="addContentBookmark('@lectureFile.Id')">
                                                            <i class="fa-regular fa-bookmark"></i>
                                                        </button>
                                                    }

                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                                else if (lectureFile.FileType == FileType.TXT)
                                {
                                    <div class="item_card_content">
                                        <div class="card_wrapper_content">
                                            <div class="item_content_container item_indent_0">
                                                <div class="content_left_container">
                                                    <div class="icon_content_item">
                                                        <i class="fa-solid fa-file"></i>
                                                    </div>
                                                    <div class="text_card_info_content">
                                                        <a class="text_card_info_title" href="@lectureFile.Url"> @lectureFile.Title </a>
                                                        <span class="text_card_info_small">Txt ● @lectureFile.FileSize</span>
                                                    </div>
                                                </div>
                                                <div class="content_right_container">
                                                    @if (lectureFile.Bookmarks.Any(x => x.Student.Email == User.Identity.Name))
                                                    {
                                                        <button class="card_header_button button_bookmark bookmark_outline bookmark_content_reverse" id="bookmark_content_@lectureFile.Id" onclick="removeContentBookmark('@lectureFile.Id')">
                                                            <i class="fa-solid fa-bookmark"></i>
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <button class="card_header_button button_bookmark bookmark_outline bookmark_content" id="bookmark_content_@lectureFile.Id" onclick="addContentBookmark('@lectureFile.Id')">
                                                            <i class="fa-regular fa-bookmark"></i>
                                                        </button>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                                else if (lectureFile.FileType == FileType.PDF)
                                {
                                    <div class="item_card_content">
                                        <div class="card_wrapper_content">
                                            <div class="item_content_container item_indent_0">
                                                <div class="content_left_container">
                                                    <div class="icon_content_item">
                                                        <i class="fa-solid fa-file"></i>
                                                    </div>
                                                    <div class="text_card_info_content">
                                                        <a class="text_card_info_title" href="/Student/Pdf/View/@lectureFile.Id"> @lectureFile.Title </a>
                                                        <span class="text_card_info_small">Pdf ● @lectureFile.FileSize</span>
                                                    </div>
                                                </div>
                                                <div class="content_right_container">
                                                    @if (lectureFile.Bookmarks.Any(x => x.Student.Email == User.Identity.Name))
                                                    {
                                                        <button class="card_header_button button_bookmark bookmark_outline bookmark_content_reverse" id="bookmark_content_@lectureFile.Id" onclick="removeContentBookmark('@lectureFile.Id')">
                                                            <i class="fa-solid fa-bookmark"></i>
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <button class="card_header_button button_bookmark bookmark_outline bookmark_content" id="bookmark_content_@lectureFile.Id" onclick="addContentBookmark('@lectureFile.Id')">
                                                            <i class="fa-regular fa-bookmark"></i>
                                                        </button>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }

                        </div>
                    </div>
                }

            </div>
        </div>
    }

</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        loadTippy();
    });

    const BookmarkType = Object.freeze({
        Module: 0, Video: 1, Lecture: 2, Content: 3
    });

    const addLectureBookmark = (id) => addBookmark(id, BookmarkType.Lecture);
    const addContentBookmark = (id) => addBookmark(id, BookmarkType.Content);
    const addVideoBookmark = (id) => addBookmark(id, BookmarkType.Video);

    function addBookmark(id, bookmarkType) {
        $.ajax({
            type: 'POST',
            url: '/Student/Bookmarks/AddBookmark',
            data: {
                id: id,
                bookmarkType: bookmarkType
            },
            success: (response) => {
                if (response.success) {
                    if (bookmarkType === BookmarkType.Lecture) {
                        const bookmark_button = document.getElementById(`bookmark_button_${id}`);
                        bookmark_button.classList.remove("bookmark_content");
                        bookmark_button.classList.add("bookmark_content_reverse");
                        bookmark_button.innerHTML = '<i class="fa-solid fa-bookmark"></i>';
                        bookmark_button.removeAttribute('onclick');
                        bookmark_button.setAttribute('onclick', `removeLectureBookmark('${id}')`);
                        showToaster('success', 'Lecture bookmarked.');
                    }
                    else if (bookmarkType === BookmarkType.Content) {
                        const bookmark_content_button = document.getElementById(`bookmark_content_${id}`);
                        bookmark_content_button.classList.remove("bookmark_content");
                        bookmark_content_button.classList.add("bookmark_content_reverse");
                        bookmark_content_button.innerHTML = '<i class="fa-solid fa-bookmark"></i>';
                        bookmark_content_button.removeAttribute('onclick');
                        bookmark_content_button.setAttribute('onclick', `removeContentBookmark('${id}')`);

                        showToaster('success', 'Content bookmarked.');
                    }
                    else if (bookmarkType === BookmarkType.Video) {
                        const bookmark_video_button = document.getElementById(`bookmark_video_button_${id}`);
                        bookmark_video_button.classList.remove("whatch_later");
                        bookmark_video_button.classList.add("whatch_later_remove");
                        bookmark_video_button.innerHTML = '<i class="fa-solid fa-circle-check"></i>';
                        bookmark_video_button.removeAttribute('onclick');
                        bookmark_video_button.setAttribute('onclick', `removeVideoBookmark('${id}')`);

                        showToaster('success', 'Video saved to watch later.');
                    }

                    loadTippy();
                }
                else {
                    showToaster('error', 'Failed to add bookmark.');
                }
            },
            error: (xhr, status, error) => {
                console.log(error);
            }
        });
    }

    const removeLectureBookmark = (id) => removeBookmark(id, BookmarkType.Lecture);
    const removeContentBookmark = (id) => removeBookmark(id, BookmarkType.Content);
    const removeVideoBookmark = (id) => removeBookmark(id, BookmarkType.Video);

    function removeBookmark(id, bookmarkType) {
        $.ajax({
            type: 'DELETE',
            url: '/Student/Bookmarks/RemoveBookmark',
            data: {
                id: id,
                bookmarkType: bookmarkType
            },
            success: (response) => {
                if (response.success) {
                    if (bookmarkType === BookmarkType.Lecture) {
                        const bookmark_button = document.getElementById(`bookmark_button_${id}`);
                        bookmark_button.classList.remove("bookmark_content_reverse");
                        bookmark_button.classList.add("bookmark_content");
                        bookmark_button.innerHTML = '<i class="fa-regular fa-bookmark"></i>';
                        bookmark_button.removeAttribute('onclick');
                        bookmark_button.setAttribute('onclick', `addLectureBookmark('${id}')`);
                        showToaster('success', 'Lecture bookmark removed.');
                    }
                    else if (bookmarkType === BookmarkType.Content) {
                        const bookmark_content_button = document.getElementById(`bookmark_content_${id}`);
                        bookmark_content_button.classList.remove("bookmark_content_reverse");
                        bookmark_content_button.classList.add("bookmark_content");
                        bookmark_content_button.innerHTML = '<i class="fa-regular fa-bookmark"></i>';
                        bookmark_content_button.removeAttribute('onclick');
                        bookmark_content_button.setAttribute('onclick', `addContentBookmark('${id}')`);
                        showToaster('success', 'Content bookmark removed.');
                    }
                    else if (bookmarkType === BookmarkType.Video) {
                        const bookmark_video_button = document.getElementById(`bookmark_video_button_${id}`);
                        bookmark_video_button.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" focusable="false" style="pointer-events: none; display: inherit; width: 24px; height: 24px;"><path d="M22 13h-4v4h-2v-4h-4v-2h4V7h2v4h4v2zm-8-6H2v1h12V7zM2 12h8v-1H2v1zm0 4h8v-1H2v1z"></path></svg>';

                        bookmark_video_button.classList.remove("whatch_later_remove");
                        bookmark_video_button.classList.add("whatch_later");

                        bookmark_video_button.removeAttribute('onclick');
                        bookmark_video_button.setAttribute('onclick', `addVideoBookmark('${id}')`);
                        showToaster('success', 'Video bookmark removed.');
                    }
                    loadTippy();
                }
                else {
                    showToaster('error', 'Failed to remove bookmark.');
                }
            },
            error: (xhr, status, error) => {
                console.log(error);
            }
        });
    }

    function handleItemExpand(id) {
        const item_card_wrapper = document.getElementById(`item_card_wrapper_${id}`);
        const item_card_header = document.getElementById(`item_card_header_${id}`);
        const expand_button = document.getElementById(`expand_button_${id}`);

        if (
            item_card_wrapper.classList.contains('item_card_wrapper_open') &&
            item_card_header.classList.contains('item_card_header_open')

        ) {
            item_card_wrapper.classList.remove('item_card_wrapper_open');
            item_card_header.classList.remove('item_card_header_open');

            expand_button.innerHTML = `<i class="fa-solid fa-arrow-down"></i>`;
        }
        else {
            console.log(item_card_header);

            item_card_wrapper.classList.add('item_card_wrapper_open');
            item_card_header.classList.add('item_card_header_open');

            expand_button.innerHTML = ` <i class="fa-solid fa-arrow-up"></i> `;
        }
    }

    function expandAll(event) {
        const items = document.querySelectorAll('.item_container');

        items?.forEach(item => {
            const item_card_wrapper = item.querySelector('.item_card_wrapper');
            const item_card_header = item.querySelector('.item_card_header');
            const expand_button = item.querySelector('.expand_button');

            if (
                !item_card_wrapper.classList.contains('item_card_wrapper_open') &&
                !item_card_header.classList.contains('item_card_header_open')
            ) {
                item_card_wrapper.classList.add('item_card_wrapper_open');
                item_card_header.classList.add('item_card_header_open');

                expand_button.innerHTML = ` <i class="fa-solid fa-arrow-up"></i> `;
            }

        });

        const button = event.target;

        button.removeAttribute('onclick');
        button.setAttribute('onclick', `collapseAll(event)`);
        button.innerText = 'Collapse All';
    }

    function collapseAll(event) {
        const items = document.querySelectorAll('.item_container')

        items?.forEach(item => {
            const item_card_wrapper = item.querySelector('.item_card_wrapper');
            const item_card_header = item.querySelector('.item_card_header');
            const expand_button = item.querySelector('.expand_button');

            if (
                item_card_wrapper.classList.contains('item_card_wrapper_open') &&
                item_card_header.classList.contains('item_card_header_open')
            ) {
                item_card_wrapper.classList.remove('item_card_wrapper_open');
                item_card_header.classList.remove('item_card_header_open');

                expand_button.innerHTML = ` <i class="fa-solid fa-arrow-down"></i> `;
            }

        });

        const button = event.target;

        button.removeAttribute('onclick');
        button.setAttribute('onclick', `expandAll(event)`);
        button.innerText = 'Expand All';
    }

    function showToaster(type, content) {
        Command: toastr[type](content);
        toastr.options = {
            "closeButton": false,
            "debug": false,
            "newestOnTop": false,
            "progressBar": false,
            "positionClass": "toast-top-right",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "500",
            "timeOut": "1000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        };
    }

    function loadTippy() {
        // Destroy all existing tippies on the specified selectors
        document.querySelectorAll('.bookmark_content, .bookmark_content_reverse, .whatch_later, .whatch_later_remove').forEach(element => {
            const instance = element._tippy;
            if (instance) {
                instance.destroy();
            }
        });

        // Initialize new tippies
        tippy(".bookmark_content", {
            content: 'Add To Bookmarks',
            placement: 'bottom',
            animation: 'fade',
            arrow: false,
            onDestroy(instance) {
                // Perform any necessary cleanup
            },
        });

        tippy(".bookmark_content_reverse", {
            content: 'Remove From Bookmarks',
            placement: 'bottom',
            animation: 'fade',
            arrow: false,
            onDestroy(instance) {
                // Perform any necessary cleanup
            },
        });

        tippy(".whatch_later", {
            content: 'Add To Watch Later',
            placement: 'bottom',
            animation: 'fade',
            arrow: false,
            onDestroy(instance) {
                // Perform any necessary cleanup
            },
        });

        tippy(".whatch_later_remove", {
            content: 'Remove From Watch Later',
            placement: 'bottom',
            animation: 'fade',
            arrow: false,
            onDestroy(instance) {
                // Perform any necessary cleanup
            },
        });
    }


</script>





